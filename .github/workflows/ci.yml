name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint
        env:
          SKIP_ENV_VALIDATION: true

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Check formatting
        run: pnpm format:check

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Check types
        run: pnpm typecheck

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run unit tests
        run: pnpm run test:unit

  e2e-self-hosting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate auth secret
        run: echo "BETTER_AUTH_SECRET=$(openssl rand -hex 32)" >> $GITHUB_ENV

      - name: Start self-hosted stack
        run: |
          DB_PASSWORD=ci_test_password \
          BETTER_AUTH_SECRET=${{ env.BETTER_AUTH_SECRET }} \
          docker compose up -d --build

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          timeout 300 bash -c 'until curl -f http://localhost:54782 > /dev/null 2>&1; do sleep 5; done'
          echo "Services are ready!"

      - name: Test application response
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:54782)
          if [ "$response" -eq 200 ]; then
            echo "✅ Application is responding with HTTP 200"
          else
            echo "❌ Application responded with HTTP $response"
            exit 1
          fi

      - name: Show container logs (on failure)
        if: failure()
        run: |
          echo "=== Docker Compose Services ==="
          docker compose ps
          echo "=== Application Logs ==="
          docker compose logs app
          echo "=== Database Logs ==="
          docker compose logs db
          echo "=== Zero Logs ==="
          docker compose logs zero

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f
